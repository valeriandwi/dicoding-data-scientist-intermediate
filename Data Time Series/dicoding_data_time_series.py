# -*- coding: utf-8 -*-
"""Dicoding - Data Time Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TNgUkP94m9qjxYXYocIMUigWDstAUZtb
"""

#import libraries
import pandas as pd
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
import sklearn.preprocessing
from sklearn.metrics import r2_score

#read data
df = pd.read_csv("AEP_hourly.csv")
df.head()

#check N/A data
df.isna().sum()

#check null data
df.isnull().sum()

df.info()

#show data visual before normalization
df.plot(figsize=(16,4), legend =True)
plt.title('DOM hourly power consumption data - BEFORE NORMALIZATION')
plt.show()

def normalize_data(df) :
  scaler = sklearn.preprocessing.MinMaxScaler()
  df['AEP_MW'] = scaler.fit_transform(df['AEP_MW'].values.reshape(-1,1))
  return df

df_norm = normalize_data(df)
df_norm.shape

#show data visual after normalization
df_norm.plot(figsize=(16,4), legend =True)
plt.title('DOM hourly power consumption data - AFTER NORMALIZATION')
plt.show()

df_norm.info()

date = df_norm["Datetime"].values
energy_consumption = df_norm["AEP_MW"].values

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

#Split data into training and validation
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_train = train_test_split(energy_consumption, date, test_size=0.2, random_state = 0, shuffle=False)

#Show splitted dataset size
print(X_train.shape)
print(X_test.shape)

from keras.layers import Dense, LSTM

data_x_train = windowed_dataset(X_train, window_size=60, batch_size=100, shuffle_buffer=5000)
data_x_test = windowed_dataset(X_test, window_size=60, batch_size=100, shuffle_buffer=5000)

model = tf.keras.models.Sequential([
  tf.keras.layers.Conv1D(filters=32, kernel_size=5,
                    strides=1, padding="causal",
                    activation="relu",
                    input_shape=[None, 1]),
  tf.keras.layers.LSTM(64, activation="tanh", return_sequences=True),
  tf.keras.layers.LSTM(64, activation="tanh", return_sequences=True),
  tf.keras.layers.LSTM(64, activation="tanh", return_sequences=False),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])
optimizer = tf.keras.optimizers.Adam(learning_rate=1e-4)
model.compile(loss="MSE",
              optimizer=optimizer,
              metrics=["mae"])
model.summary()

max = df_norm['AEP_MW'].max()
max

min = df_norm['AEP_MW'].min()
min

threshold = (max - min) * 0.1
threshold

history = model.fit(data_x_train, epochs = 10, validation_data=data_x_test)